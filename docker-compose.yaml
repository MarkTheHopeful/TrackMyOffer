services:
  web:
    build:
      context: ./WebInterface
      args:
        - A_VITE_DEV_HOST=0.0.0.0
        - A_VITE_DEV_PORT=3000
        - A_VITE_API_HOST=localhost
        - A_VITE_API_PORT=3001
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - featuresprovider
  backend:
    build:
      context: ./BackEnd
      args:
        - A_HOST=0.0.0.0
        - A_PORT=3001
        - A_OAUTH_URL=http://localhost:3001
        - A_PROVIDER_URL=http://featuresprovider:3002
        - A_VITE_URL=http://localhost:3000
        - A_DB_HOST=utility_db
        - A_DB_PORT=5432
        - A_DB_PASSWORD=utility_password
        - A_DEBUG_ENDPOINTS=true
    ports:
      - "3001:3001"
    environment:
      - CLIENT_ID
      - CLIENT_SECRET
    depends_on:
      utility_db:
        condition: service_healthy
  featuresprovider:
    build:
      context: ./FeaturesProvider
      args:
        - A_HOST=0.0.0.0
        - A_PORT=3002
        - A_DB_HOST=features_db
        - A_DB_PORT=5432
        - A_DB_PASSWORD=features_password
    ports:
      - "3002:3002"
    environment:
      - API_KEY
    depends_on:
      features_db:
        condition: service_healthy
  features_db:
    image: postgres:14-alpine
    container_name: features_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: features_user
      POSTGRES_PASSWORD: features_password
      POSTGRES_DB: features_db
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "3003:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./FeaturesProvider/database/initial_database.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U features_user -d features_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
  utility_db:
    image: postgres:14-alpine
    container_name: utility_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: utility_user
      POSTGRES_PASSWORD: utility_password
      POSTGRES_DB: utility_db
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "3004:5432"
    volumes:
      - utility_data:/var/lib/postgresql/data
      - ./BackEnd/database/initial_database.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U utility_user -d utility_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  utility_data:
